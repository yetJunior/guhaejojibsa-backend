plugins {
    id 'java'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'org.hibernate.orm' version '6.2.6.Final'
    id "org.asciidoctor.jvm.convert" version "3.3.2"
    id 'jacoco'
}

group = 'guhaejo-jibsa'
version = '1.0.0'

java {
    sourceCompatibility = '17'
}

configurations {
    all {
        exclude group: 'org.slf4j', module: 'slf4j-simple'
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
    asciidoctorExt
}

repositories {
    mavenCentral()
}

dependencies {
    //spring boot
    implementation 'org.springframework.boot:spring-boot-starter-web'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    //webSocket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    //oauth2
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    //jpa
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

    //email 인증
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'

    //db connect
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    //jwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    implementation 'com.auth0:java-jwt:3.19.2'

    //module 참조
    implementation project(':common')

    //actuator
//    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    //micrometer-prometheus
    implementation 'io.micrometer:micrometer-registry-prometheus'

    //security
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'

    //test dependency
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.mockito:mockito-inline:3.6.0'

    //test-embedded-redis
    testImplementation 'it.ozimov:embedded-redis:0.7.3'

    //restdocs
    asciidoctorExt 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    //socket
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    // gson
    implementation 'com.google.code.gson:gson:2.9.0'

    //swagger 3.0
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.4'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.15'
}

tasks.named('test') {
    useJUnitPlatform()
}

// plain.jar를 빌드하지않도록함.
jar {
    enabled = false
}
//
hibernate {
    enhancement {
        enableAssociationManagement = true
    }
}

ext {
    snippetsDir = file('build/generated-snippets')
}

asciidoctor { // asciidoctor 작업 구성
    inputs.dir snippetsDir
    configurations 'asciidoctorExt'
    dependsOn test
}

// static/docs 폴더 비우기
asciidoctor.doFirst {
    delete file('src/main/resources/static/docs')
}

// asccidoctor 작업 이후 생성된 HTML 파일을 static/docs 로 copy
task copyDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/docs/asciidoc")
    into file("src/main/resources/static/docs")
}

task printVersion() {
    println project.version;
}

// build 의 의존작업 명시
build {
    dependsOn copyDocument
}


test {
    outputs.dir snippetsDir
    finalizedBy jacocoTestReport // 테스트 종료후 항상 리포트 생성
}

jacocoTestReport {
    dependsOn test // 리포트 생성을 위해서는 test가 먼저 완료되어야 함
}

